version: '3.8'

services:
  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - WATCHPACK_POLLING=true
    networks:
      - app-network

  # Backend Symfony
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/var/www/html
      - /var/www/html/vendor
    expose:
      - "9000"
    environment:
      - APP_ENV=dev
      - APP_DEBUG=1
    depends_on:
      - database
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx
  nginx:
    image: nginx:alpine
    ports:
      - "8000:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./backend:/var/www/html:ro
      - ./frontend:/var/www/frontend
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MySQL
  database:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: app
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "user", "-ppassword"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Websocket (Node.js)
  websocket:
    build:
      context: ./websocket
      dockerfile: Dockerfile.dev
    volumes:
      - ./websocket:/app
      - /app/node_modules
    ports:
      - "3001:3001"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
